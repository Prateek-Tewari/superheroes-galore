{"version":3,"sources":["assets/ironman.jpg","assets/cap.jpg","assets/hulk.jpeg","assets/thor.jpg","assets/widow.jpg","components/cards.js","components/card-list.js","components/searchBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cards","props","className","name","src","style","alt","CardList","console","log","data","map","hero","key","id","dimensions","SearchBox","placeholder","handleChange","type","onChange","App","state","superheroes","IronMan","height","width","Cap","Hulk","Thor","Widow","searchField","this","filteredHeroes","filter","toLowerCase","includes","e","setState","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+GAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,sPCY5BC,MATf,SAAeC,GAEb,OACE,yBAAKC,UAAU,QACb,4BAAKD,EAAME,MACX,yBAAKC,IAAKH,EAAMG,IAAKC,MAAOJ,EAAMI,MAAOC,IAAI,mBCapCC,MAjBf,SAAkBN,GAGhB,OAFAO,QAAQC,IAAIR,GAGV,6BACGA,EAAMS,KAAKC,KAAI,SAAAC,GAAI,OAClB,kBAAC,EAAD,CACEC,IAAKD,EAAKE,GACVX,KAAMS,EAAKT,KACXC,IAAKQ,EAAKR,IACVC,MAAOO,EAAKG,kB,iFCZTC,EAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,2BAAOC,KAAK,SAASF,YAAaA,EAAaG,SAAUF,KCkE5CG,E,YA1Db,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,YAAa,CACX,CACEpB,KAAM,UACNW,GAAI,EACJV,IAAKoB,IACLT,WAAY,CAAEU,OAAQ,IAAKC,MAAO,MAEpC,CACEvB,KAAM,kBACNW,GAAI,EACJV,IAAKuB,IACLZ,WAAY,CAAEU,OAAQ,IAAKC,MAAO,MAEpC,CACEvB,KAAM,WACNW,GAAI,EACJV,IAAKwB,IACLb,WAAY,CAAEU,OAAQ,IAAKC,MAAO,MAEpC,CACEvB,KAAM,eACNW,GAAI,EACJV,IAAKyB,IACLd,WAAY,CAAEU,OAAQ,IAAKC,MAAO,MAEpC,CACEvB,KAAM,cACNW,GAAI,EACJV,IAAK0B,IACLf,WAAY,CAAEU,OAAQ,IAAKC,MAAO,OAGtCK,YAAa,IAnCH,E,sEAuCJ,IAAD,SAC8BC,KAAKV,MAAlCC,EADD,EACCA,YAAaQ,EADd,EACcA,YACfE,EAAiBV,EAAYW,QAAO,SAAAtB,GAAI,OAC5CA,EAAKT,KAAKgC,cAAcC,SAASL,EAAYI,kBAE/C,OACE,yBAAKjC,UAAU,kBACb,wBAAIA,UAAU,WAAd,sBACA,kBAAC,EAAD,CACEe,YAAY,qBACZC,aAAc,SAAAmB,GAAC,OAAI,EAAKC,SAAS,CAAEP,YAAaM,EAAEE,OAAOC,WAE3D,6BACA,kBAAC,EAAD,CAAU9B,KAAMuB,S,GArDNQ,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.17c1193e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ironman.b9138c43.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cap.1d479916.jpg\";","module.exports = __webpack_public_path__ + \"static/media/hulk.5ca5b8cc.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/thor.afa5ba48.jpg\";","module.exports = __webpack_public_path__ + \"static/media/widow.0c31e5a4.jpg\";","import React from \"react\";\r\nimport \"./cardstyle.css\";\r\n\r\nfunction Cards(props) {\r\n  // console.log(props);\r\n  return (\r\n    <div className=\"card\">\r\n      <h2>{props.name}</h2>\r\n      <img src={props.src} style={props.style} alt=\"My SuperHero\" />\r\n    </div>\r\n  );\r\n}\r\nexport default Cards;\r\n","import React from \"react\";\r\nimport \"./pageStyle.css\";\r\nimport Cards from \"./cards\";\r\n\r\nfunction CardList(props) {\r\n  console.log(props);\r\n  // console.log(`CardList - ${props.data[0].name}`);\r\n  return (\r\n    <div>\r\n      {props.data.map(hero => (\r\n        <Cards\r\n          key={hero.id}\r\n          name={hero.name}\r\n          src={hero.src}\r\n          style={hero.dimensions}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n  <input type=\"search\" placeholder={placeholder} onChange={handleChange} />\r\n);\r\n","import React from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/card-list\";\nimport IronMan from \"./assets/ironman.jpg\";\nimport Cap from \"./assets/cap.jpg\";\nimport Hulk from \"./assets/hulk.jpeg\";\nimport Thor from \"./assets/thor.jpg\";\nimport Widow from \"./assets/widow.jpg\";\nimport { SearchBox } from \"./components/searchBox\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      superheroes: [\n        {\n          name: \"IronMan\",\n          id: 1,\n          src: IronMan,\n          dimensions: { height: 180, width: 250 }\n        },\n        {\n          name: \"Captain America\",\n          id: 2,\n          src: Cap,\n          dimensions: { height: 180, width: 250 }\n        },\n        {\n          name: \"The Hulk\",\n          id: 3,\n          src: Hulk,\n          dimensions: { height: 180, width: 250 }\n        },\n        {\n          name: \"Thor Odinson\",\n          id: 4,\n          src: Thor,\n          dimensions: { height: 180, width: 250 }\n        },\n        {\n          name: \"Black Widow\",\n          id: 5,\n          src: Widow,\n          dimensions: { height: 180, width: 250 }\n        }\n      ],\n      searchField: \"\"\n    };\n  }\n\n  render() {\n    const { superheroes, searchField } = this.state;\n    const filteredHeroes = superheroes.filter(hero =>\n      hero.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App App-header\">\n        <h1 className=\"heading\">SuperHeroes Galore</h1>\n        <SearchBox\n          placeholder=\"Search your Heroes\"\n          handleChange={e => this.setState({ searchField: e.target.value })}\n        />\n        <br />\n        <CardList data={filteredHeroes} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}